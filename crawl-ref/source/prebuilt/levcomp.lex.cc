#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1054] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   80,   78,   75,   76,
       77,   73,   78,   71,   74,   72,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   75,   34,   36,   78,   78,   78,   78,   78,
       78,   79,    6,   79,   79,    4,    2,    3,   79,    2,
        2,    2,    2,    9,   10,   79,    9,    9,   79,   12,
       79,   32,   75,   33,   77,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   75,   32,   32,

       32,   32,   32,   32,   32,   32,   78,   28,   23,   28,
       73,   78,   27,   74,   72,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   28,   34,   36,   78,   78,   78,   78,   78,
       78,   15,   16,   77,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   78,   13,   15,   13,   13,   13,   13,   13,
       79,   21,   22,   79,   20,   79,   75,   76,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   75,   34,   36,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,    0,    0,   39,    6,
        5,    0,    0,    2,    3,    2,    0,    2,    2,    2,
        2,    9,    9,   10,    9,    9,    9,    0,   11,    0,
       12,   31,    0,   31,   75,   33,    0,    0,   33,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,    0,   30,   31,   75,   31,   34,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   26,    0,
       26,   28,   23,   28,    0,   23,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   25,    0,   26,   28,   26,   34,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   15,   16,    0,    0,
        0,   16,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    0,   14,   13,
       15,   13,   13,   13,   13,   13,   13,   13,   19,    0,
       19,   21,   22,    0,    0,    0,    0,   18,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    9,    9,    9,    7,    0,    0,   29,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   34,   31,   31,   31,
       31,   31,   31,    0,   24,    0,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   34,   34,   26,   26,   26,   26,   26,   26,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,    0,    2,
        9,    8,    0,    9,    7,    0,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,    0,    0,   31,   31,   31,   31,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,    0,    0,   26,   26,
       26,   26,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,    0,    0,   64,    0,
        0,    0,    0,    0,    0,    0,    0,   63,   42,    0,
        0,    0,    0,    0,    0,   51,    0,    0,    0,   38,

        0,    0,    0,    0,    2,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,   44,   50,   61,

       67,   68,   70,   69,    0,    0,    0,    0,    0,    0,
        0,   46,   62,    0,   54,    0,    0,    0,    0,    0,
       41,    1,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   53,   48,   56,   52,    0,    0,    0,    0,

       65,   55,   45,    0,   49,    0,    0,    0,    0,    1,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,    0,    0,    0,    0,   66,   47,    0,
        0,    0,    0,   31,   31,   31,   31,   31,   31,   31,
        0,   31,   31,   26,   26,   26,   26,   26,   26,   26,
        0,   26,   26,   13,   13,   13,   13,   13,   13,    0,
        0,   58,    0,    0,   37,    0,    0,   31,   31,   31,

       31,   31,   31,    0,   31,   26,   26,   26,   26,   26,
       26,    0,   26,   13,   13,   13,   13,   57,    0,   60,
        0,   40,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   13,   13,   59,    0,   31,   31,   26,   26,
       13,    0,   31,   26,   13,    0,   31,   26,   13,   43,
       31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   22,   33,   22,   22,   22,
        1,   34,    1,    1,   22,    1,   35,   22,   22,   36,

       37,   38,   22,   39,   40,   22,   22,   41,   22,   22,
       42,   43,   22,   44,   45,   46,   47,   48,   22,   22,
       22,   22,   49,    1,   50,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1071] =
    {   0,
        0,   49,   53,   60,   64,   66,   49,   68,  116,  165,
      214,  263,  312,  361,   76,  170, 2279, 3464,   71, 3464,
     2275, 3464, 2266, 3464, 2261, 3464, 2251,   55, 2246,   60,
     2223,   68,   70,   74,   70, 2224, 2225, 2216,   75, 2226,
     2220, 2197,  409,    0, 3464,  155, 2183, 2182,  144,   67,
     2170, 3464, 3464, 2215,  180, 3464,    0, 3464, 2210,  189,
        0, 2186,  164, 2160, 3464, 2203,   58, 2152,  109, 3464,
     2176,  268,  275, 3464,  366,  373,  378,  383,  388,  392,
      414,  426,  432,  437,  460,  465,  471,  475,  480,  493,
      499,  511,  515,  524,  534,  550,  539,  557,  561,  565,

      570,  575,  583,  596,  601,  606,  269,  610, 3464,  629,
      374,  422, 3464,  591,  379,  506,  637,  438,  641,  614,
      648,  649,  647,  657,  656,  674,  675,  684,  690,  694,
      710,  692,  717,  728,  516,  729,  705,  584,  733,  738,
      743,  766, 3464,  777, 2167, 2156,    0, 2138,  160, 2131,
      164, 2106,  178,  168,  185,  253, 2104, 2107, 2089,  261,
     2103, 2098,  282, 2067,  781,  263, 2051, 2045,  378,  141,
      755,  791, 3464,  799, 3464,  803,  200, 3464, 2069, 2038,
     2046, 2031, 2020, 2034, 2025, 2025, 2022, 2003,  269, 2007,
     2003, 2000, 2000, 1999, 1989, 1993, 1999, 1988, 1967, 1977,

     1965,  268, 1944,    0,    0, 3464, 1930, 1932,  260, 1922,
        0,  172, 1926, 1911, 1930,  380, 1900, 1885, 3464, 3464,
     3464, 1922,  295,    0, 3464,    0, 1918,  527, 1899, 1887,
      384, 1861, 1860, 3464,  260, 1857,  814,  361, 3464, 1898,
     3464,  786,  808,  819,  824, 3464,  836,  841, 3464,  845,
      850,  855,  861,  871,  867,  886,  892,  898,  906,  912,
      917,  925,  929,  940,  945,  951,  960,  967,  971,  982,
      986,  991, 1002, 1025, 3464, 1007,    0, 1013, 1017, 1029,
     1033, 1038, 1044, 1051, 1064, 1072, 1078, 1082,  933,  955,
     1088, 1092, 3464, 1097, 1115, 3464, 1103, 1105, 1123, 1125,

     1130, 1138, 1139, 1145, 1150, 1140, 1163, 1151, 1161, 1175,
     1176, 1181, 1187, 1191, 1198, 1196, 1203, 1222, 1221, 1226,
     1239, 3464, 1249, 1211,    0, 1257, 1263, 1272, 1280, 1278,
     1282, 1287, 1293, 1288, 1294, 1299, 1321, 3464, 1332, 1339,
     1343, 3464,    0, 1886, 1869, 1878, 1864, 1849, 1863, 1849,
     1851, 1845, 1821,  432, 1827, 1811, 1800, 1801, 1800, 1775,
     1784, 1784, 1769, 1756, 1771, 1750,  270, 1347, 3464, 1730,
        0,  478, 1732, 1720, 1742,  429, 1708, 1699, 1305, 1351,
     1355, 1359, 3464, 1365, 1369, 1374, 1378, 3464, 1392, 1728,
     1711, 1696, 1688, 1698, 1683, 1681, 1681, 1667, 1648, 1650,

      465, 1659, 1649, 1638, 1635, 1637, 1631, 1625, 1614, 1617,
     1602, 1597, 1599, 1602, 1573, 1398,  700, 1561, 1571, 1557,
     1550, 1561, 1402, 1411, 1415, 3464, 1419, 1423, 3464, 1427,
     1432, 1436, 1442, 1446, 1454, 1470, 1477, 1482, 1488, 1494,
     1504, 1508, 1521, 1527, 1513, 1535, 1544, 1549, 1555, 1560,
     1569, 1575, 1586, 1591, 1596, 1602, 1610, 1619, 1624, 1629,
     1637, 1641, 1645, 1652, 3464, 1657, 1664, 1437, 1662, 1678,
     1680, 1686, 1688, 1690, 1699, 1695, 1700, 1725, 1706, 1713,
     1726, 1737, 1730, 1741, 1746, 1748, 1760, 1761, 1768, 1774,
     1772, 1779, 1807, 1815, 1819, 1781, 1794, 1798, 1799, 1829,

     1572, 1556, 1554, 1545, 1549, 1543, 1538, 1543, 1528, 1511,
     1508,  521, 1518, 1504, 1490, 1502, 1500, 1490, 1488, 1477,
     1473, 1459, 1455, 1464, 1463, 1433, 1840,  748, 1426, 1436,
     1420, 1413, 1844, 3464, 1852, 1435, 1438, 1417, 1423, 1403,
     1394, 1398, 1378, 1373, 1369, 1360, 1368, 1359, 1361, 1358,
     1353, 1342, 1316, 1306, 1314, 1313, 1302, 1286, 1303, 1291,
     1278, 1256, 1856, 3464,  829, 1253, 1247, 1252, 1055, 1273,
     1862, 3464, 1870, 1877, 3464, 1881, 1885, 1890, 1894, 1898,
     1904, 1912, 1918, 1931, 1935, 1940, 1945, 1949, 1953, 1962,
     1984, 1988, 1993, 2002, 1968, 2006, 2011, 2015, 2033, 2039,

     2048, 2052, 2056, 2067, 2061, 2072, 2079, 2083, 2089, 2073,
     1835, 2095, 2094, 2100, 2107, 2106, 2120, 2130, 2134, 2140,
     2141, 2142, 2148, 2156, 2147, 2160, 2161, 2175, 2181, 2182,
     2187, 2183, 2191, 2202, 2206, 2195, 2241, 2218, 2222, 2226,
     2230, 2236, 1260, 1263, 1239, 1250, 1239, 1247, 1251, 1227,
     1232, 1225, 1216, 1220, 1207, 1210, 1212, 1210, 1208, 1188,
     1188, 1190, 1182, 1169, 1151, 1158, 1149, 1134, 1107, 1101,
     1110, 1189, 1108, 1117, 1104, 1111, 1109, 1103, 3464, 1099,
     1091, 1076, 1067, 1045, 1042,  420, 1041, 3464, 3464, 1034,
     1027, 1042, 1040, 1026, 1032, 3464, 1008,  999,  972, 3464,

      972,  968, 1386,  953,  971, 2246, 2257, 2253, 2284, 2288,
     2293, 2279, 2297, 2302, 2321, 2330, 2315, 2336, 2342, 2346,
     2354, 2358, 2364, 2377, 2381, 2385, 2397, 2401, 2405, 2412,
     2420, 2424, 2428, 2432, 2436, 2445, 2451, 2418, 2455, 2459,
     2471, 2472, 2485, 2319, 2490, 2496, 2502, 2508, 2507, 2494,
     2516, 2520, 2524, 2530, 2538, 2543, 2550, 2551, 2555, 2563,
     2565, 2571, 2576, 2578, 2586, 2588, 2593, 2598, 2602,  968,
      980,  953,  966,  965,  956,  949,  942,  936,  931,  906,
      899,  432,  895,  892,  887,  901,  900,  882,  892,  867,
      868,  851,  851,  851,  871,  870,  869, 3464, 3464, 3464,

     3464, 3464, 3464, 3464,  865,  481,  840,  841,  849,  839,
      836, 3464, 3464,  819, 3464,  823,  815,  784,  777,  763,
     3464,  794, 2604, 2609, 2621, 2635, 2640, 2644, 2648, 2652,
     2656, 2660, 2668, 2683, 2679, 2687, 2691, 2695, 2707, 2718,
     2722, 2726, 2730, 2734, 2740, 2745, 2749, 2761, 2765, 2629,
     2770, 2775, 2699, 2756, 2771, 2776, 2783, 2787, 2791, 2796,
     2798, 2792, 2810, 2822, 2831, 2833, 2818, 2835, 2837, 2844,
     2845, 2846, 2853, 2857, 2859, 2868,  786,  775,  764,  762,
      563,  739,  744,  752,  749,  747,  738,  742,  730,  700,
      704,  690, 3464, 3464, 3464, 3464,  700,  704,  699,  693,

     3464, 3464, 3464,  689, 3464,  688,  683, 1495,  651,  679,
     2870, 2879, 2884, 2893, 2904, 2912, 2917, 2921, 2930, 2935,
     2945, 2954, 2958, 2963, 2968, 2972, 2978, 2910, 2952, 2979,
     2985, 2989, 2993, 2994, 2998, 2999, 3003, 3005, 3024, 3015,
     3029, 3033, 3040, 3042,  641,  635,  623,  613,  617,  614,
      614, 1570,  586,  596,  583,  580,  573, 3464, 3464,  546,
     1787,  532, 1954, 3046, 3051, 3057, 3079, 3088, 3093, 3097,
     3101, 3105, 3110, 3106, 3114, 3052, 3115, 3066, 3119, 3121,
     3132, 3140, 3141,  547,  540,  545,  539,  510, 1976,  513,
      470, 3464,  469,  407, 3464, 2263,  389, 3158, 3163, 3167,

     3174, 3180, 3189, 3194, 3198, 3204, 3202, 3208, 3210, 3216,
     3222, 3224, 3228,  408,  381,  383,  354, 3464,  362, 3464,
      329, 3464, 3235, 3247, 3259, 3263, 3270, 3252, 3277, 3278,
     3282, 3283,  295,  258, 3464,  221, 3290, 3294, 3298, 3300,
      165,  168, 3305, 3313,   76,   94, 3317, 3321,   84, 3464,
     3333, 3325, 3464, 3367, 3373, 3379, 3385, 3391, 3397, 3403,
     3409, 3415, 3421, 3427, 3433, 3439, 3445, 3451,   54, 3457
    } ;

static yyconst flex_int16_t yy_def[1071] =
    {   0,
     1053,    1, 1054, 1055, 1056, 1056, 1057, 1057, 1053,    9,
     1053,   11, 1053,   13, 1058, 1058, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1059, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1060, 1053, 1061, 1053, 1053, 1062,
     1061, 1061, 1061, 1063, 1053, 1053, 1063, 1063, 1064, 1053,
     1053, 1065, 1053, 1053, 1053, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065,   43, 1066, 1065,

     1065, 1065, 1065, 1065, 1065, 1065, 1067, 1053, 1053, 1053,
     1067, 1067, 1053, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067,   43, 1068, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1053, 1053, 1053, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1053, 1069,   43, 1069, 1069, 1069, 1069, 1069,
     1070, 1053, 1053, 1053, 1053, 1070, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053,   43, 1059, 1053, 1053, 1053, 1053, 1053,
     1059, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1061, 1053, 1061, 1053, 1061, 1061, 1061,
     1061, 1063, 1063, 1053, 1063, 1063, 1063, 1064, 1053, 1053,
     1053, 1065, 1065, 1065, 1053, 1053, 1053, 1053, 1053, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1053, 1065,   98, 1066, 1066, 1066,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1067, 1067,
     1067, 1053, 1053, 1053, 1053, 1053, 1067, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1053, 1053, 1067,  133, 1068, 1068, 1068, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1053, 1053, 1053, 1053,
     1053, 1053, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1053, 1053, 1069,
      165, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070,
     1070, 1053, 1053, 1053, 1053, 1053, 1070, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1061, 1063, 1063, 1063, 1053, 1053, 1065, 1053, 1053,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1066, 1065, 1065, 1065,
     1065, 1065, 1065, 1067, 1053, 1053, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1068, 1059, 1067, 1067, 1067, 1067, 1067, 1067,

     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1070, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1061,
     1063, 1053, 1053, 1063, 1053, 1053, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,

     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1061, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1061, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1061,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1069, 1069, 1069, 1069, 1069, 1069, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1065, 1065, 1065,

     1065, 1065, 1065, 1065, 1065, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1069, 1069, 1069, 1069, 1053, 1053, 1053,
     1053, 1053, 1065, 1065, 1065, 1065, 1065, 1067, 1067, 1067,
     1067, 1067, 1069, 1069, 1053, 1053, 1065, 1065, 1067, 1067,
     1069, 1053, 1065, 1067, 1069, 1053, 1065, 1067, 1069, 1053,
     1065, 1067,    0, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053
    } ;

static yyconst flex_int16_t yy_nxt[3515] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   41,   18,   18,   42,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       43,   70,   71,   43,   44,   53,   54,   55,   56,  343,
       45,   52,   58,   59,   60,   61,   65,   66,   65,   66,
       70,   71,  177,   46,  181,  177,   62,  172,  173,  174,
      172,  182,  194,  184,  175,  187,  192,  190,  188,   47,
      185,   48,  189,   49,  199, 1050,   50,   51,  191,  195,

      193,  217,  235,  218,   63, 1050,  200,  236,   67,  176,
       67,  239,  240,   68, 1049,   68,   72,   73,   74,   75,
       73,   72,   76,   77,   78,   77,   79,   80,   72,   81,
       82,   83,   72,   84,   72,   72,   85,   72,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   72,   95,   96,
       72,   97,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   98,  212,  215,   98,
       99,  172,  173,  174,  172,  377,  100,  378,  175,  346,
      230,  193,  220,  222,  223,  355,  347,  349,  216,  101,
      221,  225,  227,  228,  350,  352,  356,  357,  353,  416,

      403,  177,  354,  176,  177,  102, 1046,  103,  231,  104,
     1045,  358,  105,  106,  107,  108,  109,  110,  108,  107,
      111,  112,  113,  112,  114,  115,  107,  116,  117,  118,
      107,  119,  107,  107,  120,  107,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  107,  130,  131,  107,  132,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  133,  359, 1042,  133,  134,  243,
      290,  243,  243,  290,  135,  372,  245,  246,  247,  245,
      364,  399,  360,  368,  369,  368,  368,  136,  413,  358,
      524,  414,  365,  525,  217,  400,  218,  220,  222,  223,

     1041,  244,  291,  137,  235,  138, 1035,  139,  248,  236,
      140,  141,   18,  142,  143,  144,  142,   18,   22,   23,
       24,  145,  146,   26,  147,  148,  149,  150,  147,  151,
      147,  147,  152,  147,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  147,  162,  163,  147,  164,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
       18,   18,  165,  239,  240,  165,   44,  247,  249,  247,
      247, 1036,   45, 1035,  243,  290,  243,  243,  290,  243,
      290,  243,  243,  290,  243,  166,  243,  243,  250,  243,
     1034,  243,  243,  243, 1020,  243,  243, 1033,  250,  248,

      230,  167,  375,  168,  215,  169,  244,  291,  170,   51,
      204,  244,  291,  204,  205,  243,  244,  243,  243, 1018,
      206,  244,  376,  290,  216,  244,  290,  243,  231,  243,
      243,  251,  297,  243,  807,  243,  243, 1022,  243,  290,
      243,  243,  290, 1021,  510,  252,  882,  244,  254,  207,
      808,  208,  253,  375,  301,  291,  209,  210,  511,  244,
      255,  243,  883,  243,  243,  244,  243,  256,  243,  243,
      244,  291,  243,  376,  243,  243,  243,  547,  243,  243,
     1020,  243,  258,  243,  243,  259, 1019,  263,  261,  260,
      257,  548,  265,  244,  243,  897,  243,  243,  244,  262,

      243,  264,  243,  243,  244,  527,  514,  290,  244,  266,
      290,  898,  243,  244,  243,  243,  243,  290,  243,  243,
      290,  267,  268,  298, 1018,  243,  244,  243,  243,  225,
      227,  228,  244,  654,  270,  243,  272,  243,  243,  291,
      243,  269,  243,  243,  244, 1017,  271,  655,  244,  291,
      273,  274,  275,  274,  274, 1016,  992,  244,  277,  246,
      247,  277,  279, 1015,  279,  279,  243,  244,  243,  243,
     1014,  243,  244,  243,  243,  276,  243,  945,  243,  243,
      995,  994,  281,  244,  243,  290,  243,  243,  290,  993,
      248,  992,  290,  946,  280,  290,  264,  243,  244,  243,

      243,  297,  243,  244,  243,  243,  991,  243,  244,  243,
      243,  292,  293,  294,  292,  290,  244,  291,  290,  990,
      284,  282,  989,  988,  291,  959,  283,  331,  958,  244,
      294,  296,  294,  294,  244,  286,  987,  287,  290,  244,
      285,  290,  290,  295,  304,  290,  986,  291,  290,  290,
      290,  290,  290,  290,  288,  985,  299,  290,  290,  310,
      290,  290,  295,  300,  302,  305,  308,  984,  306,  312,
      291,  303,  307,  311,  291,  290,  290,  309,  290,  290,
      291,  291,  291,  910,  314,  290,  313,  963,  290,  291,
      291,  290,  960,  290,  290,  290,  290,  315,  290,  959,

      958,  565,  319,  317,  565,  316,  290,  291,  291,  290,
      320,  321,  322,  323,  321,  318,  957,  291,  325,  293,
      294,  325,  956,  291,  955,  291,  954,  291,  324,  327,
      290,  211,  327,  290,  290,  953,  211,  290,  291,  290,
      952,  329,  290,  291,  290,  951,  950,  290,  566,  565,
      295,  330,  565,  905,  949,  311,  380,  332,  903,  380,
      902,  328,  291,  901,  948,  947,  291,  337,  338,  339,
      337,  291,  334,  896,  335,  895,  291,  333,  341,  342,
      341,  341,  371,  338,  339,  371,  894,  243,  381,  243,
      243,  336,  382,  383,  384,  382,  566,  893,  910,  340,

      386,  383,  386,  386,  387,  388,  389,  387,  909,  243,
      340,  243,  243,  908,  340,  425,  426,  427,  425,  244,
      428,  429,  428,  428,  385,  245,  246,  247,  245,  907,
      565,  906,  385,  565,  905,  904,  381,  247,  246,  247,
      247,  244,  430,  275,  430,  430,  243,  903,  243,  243,
      902,  243,  244,  243,  243,  250,  243,  248,  243,  243,
      901,  900,  243,  423,  243,  243,  899,  432,  243,  248,
      243,  243,  243,  431,  243,  243,  896,  566,  244,  435,
      895,  894,  893,  244,  433,  892,  891,  243,  244,  243,
      243,  890,  889,  243,  244,  243,  243,  888,  434,  243,

      244,  243,  243,  815,  244,  887,  436,  243,  437,  243,
      243,  813,  812,  243,  438,  243,  243,  886,  243,  244,
      243,  243,  885,  884,  440,  244,  243,  881,  243,  243,
      243,  244,  243,  243,  290,  880,  439,  290,  441,  244,
      442,  243,  804,  243,  243,  244,  243,  803,  243,  243,
      244,  443,  243,  802,  243,  243,  290,  444,  244,  290,
      801,  243,  244,  243,  243,  445,  291,  800,  243,  446,
      243,  243,  243,  244,  243,  243,  799,  798,  244,  449,
      448,  879,  447,  243,  244,  243,  243,  243,  291,  243,
      243,  450,  243,  244,  243,  243,  878,  877,  822,  452,

      244,  821,  820,  243,  244,  243,  243,  819,  243,  453,
      243,  243,  818,  451,  279,  244,  279,  279,  279,  244,
      279,  279,  454,  817,  244,  455,  274,  275,  274,  274,
      457,  429,  457,  457,  243,  244,  243,  243,  816,  243,
      244,  243,  243,  815,  456,  243,  280,  243,  243,  814,
      280,  813,  243,  812,  243,  243,  703,  811,  244,  703,
      458,  444,  280,  461,  810,  243,  244,  243,  243,  809,
      806,  244,  459,  243,  805,  243,  243,  244,  804,  243,
      460,  243,  243,  243,  244,  243,  243,  803,  284,  464,
      465,  466,  464,  292,  293,  294,  292,  244,  294,  293,

      294,  294,  802,  704,  290,  244,  290,  290,  285,  290,
      801,  244,  462,  297,  800,  244,  323,  322,  323,  323,
      799,  291,  798,  463,  290,  295,  290,  290,  467,  290,
      295,  290,  797,  796,  290,  468,  291,  795,  291,  290,
      290,  290,  290,  290,  290,  794,  290,  793,  469,  290,
      471,  290,  290,  792,  290,  290,  291,  470,  291,  472,
      791,  473,  290,  291,  290,  290,  474,  290,  790,  696,
      475,  291,  291,  291,  478,  476,  290,  290,  291,  290,
      290,  789,  290,  291,  291,  290,  788,  479,  290,  477,
      703,  290,  290,  703,  291,  290,  291,  290,  787,  290,

      290,  481,  290,  480,  290,  482,  786,  290,  291,  291,
      485,  484,  290,  785,  291,  290,  486,  784,  483,  689,
      291,  688,  290,  290,  291,  290,  290,  290,  783,  291,
      290,  291,  782,  781,  487,  488,  291,  704,  780,  489,
      321,  322,  323,  321,  291,  779,  490,  778,  492,  491,
      323,  322,  323,  323,  291,  291,  777,  776,  327,  291,
      211,  327,  679,  775,  327,  211,  211,  327,  774,  773,
      772,  211,  291,  493,  465,  494,  493,  771,  770,  290,
      211,  290,  290,  290,  290,  705,  290,  702,  290,  290,
      328,  290,  290,  701,  290,  290,  328,  290,  290,  498,

      290,  700,  699,  290,  698,  328,  380,  495,  480,  380,
      697,  291,  496,  291,  696,  291,  695,  332,  497,  694,
      291,  291,  337,  338,  339,  337,  291,  291,  499,  693,
      692,  691,  291,  341,  338,  341,  341,  333,  381,  500,
      368,  369,  368,  368,  341,  690,  341,  341,  368,  369,
      368,  368,  380,  689,  340,  380,  533,  534,  535,  533,
      382,  383,  384,  382,  688,  340,  386,  383,  386,  386,
      389,  388,  389,  389,  687,  386,  340,  386,  386,  387,
      388,  389,  387,  686,  381,  685,  684,  703,  381,  683,
      703,  682,  385,  389,  388,  389,  389,  681,  385,  563,

      564,  563,  563,  571,  572,  573,  571,  385,  680,  679,
      678,  381,  574,  575,  576,  574,  425,  426,  427,  425,
      427,  426,  427,  427,  428,  429,  428,  428,  430,  275,
      430,  430,  677,  243,  704,  243,  243,  243,  290,  243,
      243,  290,  676,  243,  577,  243,  243,  243,  675,  243,
      243,  423,  674,  673,  672,  243,  244,  243,  243,  671,
      423,  578,  611,  527,  233,  244,  670,  669,  579,  244,
      291,  243,  581,  243,  243,  244,  580,  668,  243,  244,
      243,  243,  667,  243,  666,  243,  243,  244,  665,  243,
      664,  243,  243,  582,  584,  243,  961,  243,  243,  961,

      663,  583,  662,  244,  585,  243,  661,  243,  243,  243,
      244,  243,  243,  660,  243,  244,  243,  243,  659,  658,
      588,  244,  243,  586,  243,  243,  657,  244,  243,  587,
      243,  243,  656,  653,  589,  590,  243,  244,  243,  243,
      652,  244,  592,  962,  651,  243,  244,  243,  243,  591,
      243,  593,  243,  243,  244,  650,  243,  594,  243,  243,
      244,  243,  649,  243,  243,  595,  648,  647,  244,  596,
      243,  961,  243,  243,  961,  646,  243,  244,  243,  243,
      645,  644,  244,  597,  643,  570,  598,  243,  244,  243,
      243,  569,  243,  244,  243,  243,  568,  243,  416,  243,

      243,  567,  244,  243,  599,  243,  243,  562,  244,  601,
      602,  457,  429,  457,  457,  600,  561,  560,  962,  244,
      604,  564,  604,  604,  244,  605,  559,  243,  605,  244,
      243,  558,  243,  243,  557,  244,  603,  556,  243,  555,
      243,  243,  243,  280,  243,  243,  243,  554,  243,  243,
      553,  552,  244,  464,  465,  466,  464,  244,  466,  465,
      466,  466,  244,  290,  458,  290,  290,  551,  290,  607,
      244,  550,  606,  549,  244,  546,  610,  545,  244,  290,
      608,  290,  290,  544,  290,  291,  609,  290,  612,  290,
      290,  290,  290,  543,  290,  291,  290,  291,  614,  290,

      290,  290,  617,  290,  290,  542,  541,  290,  613,  615,
      290,  291,  616,  291,  290,  618,  540,  290,  539,  291,
      623,  291,  538,  291,  619,  620,  290,  290,  291,  290,
      290,  290,  291,  291,  290,  624,  537,  621,  290,  291,
      536,  290,  290,  627,  532,  290,  291,  290,  531,  290,
      290,  622,  290,  626,  530,  625,  529,  628,  291,  291,
      629,  290,  290,  291,  290,  290,  528,  526,  523,  290,
      291,  630,  290,  290,  291,  290,  290,  631,  290,  291,
      290,  291,  638,  290,  522,  638,  635,  521,  961,  520,
      632,  961,  634,  291,  291,  290,  519,  633,  290,  290,

      290,  291,  290,  290,  518,  291,  517,  291,  493,  465,
      494,  493,  291,  636,  291,  211,  494,  465,  494,  494,
      637,  564,  563,  637,  516,  495,  515,  291,  514,  639,
      290,  291,  291,  290,  640,  962,  290,  513,  641,  290,
      328,  563,  564,  563,  563,  533,  534,  535,  533,  739,
      512,  509,  291,  535,  534,  535,  535,  563,  564,  563,
      563,  508,  291,  571,  572,  573,  571,  507,  291,  506,
      642,  573,  572,  573,  573,  505,  504,  381,  574,  575,
      576,  574,  576,  575,  576,  576,  243,  503,  243,  243,
      502,  243,  501,  243,  243,  243,  344,  243,  243,  243,

      239,  243,  243,  706,  707,  243,  424,  243,  243,  423,
      233,  233,  229,  243,  422,  243,  243,  709,  244,  243,
      225,  243,  243,  244,  220,  708,  233,  244,  711,  712,
      421,  244,  243,  710,  243,  243,  243,  244,  243,  243,
      420,  243,  419,  243,  243,  244,  243,  418,  243,  243,
      243,  244,  243,  243,  243,  996,  243,  243,  996,  714,
      417,  713,  715,  243,  244,  243,  243,  717,  244,  243,
      219,  243,  243,  244,  716,  214,  213,  996,  244,  718,
      996,  415,  244,  412,  719,  243,  244,  243,  243,  243,
      411,  243,  243,  724,  243,  244,  243,  243,  410,  721,

      720,  244,  997,  243,  722,  243,  243,  243,  409,  243,
      243,  408,  243,  407,  243,  243,  243,  244,  243,  243,
      406,  244,  725,  405,  997,  404,  244,  726,  403,  402,
      401,  723,  727,  398,  243,  244,  243,  243,  397,  244,
      243,  396,  243,  243,  244,  395,  394,  393,  244,  243,
      729,  243,  243,  243,  392,  243,  243,  243,  391,  243,
      243,  390,  605,  728,  243,  605,  244,  730,  604,  564,
      604,  604,  244,  243,  290,  243,  243,  290,  731,  179,
      243,  244,  243,  243,  243,  244,  243,  243,  374,  244,
      736,  738,  243,  736,  244,  290,  290,  373,  290,  290,

      244,  290,  732,  370,  290,  244,  291,  290,  290,  606,
      290,  290,  244,  741,  367,  366,  244,  744,  735,  363,
      733,  290,  244,  743,  290,  734,  740,  291,  291,  742,
      362,  290,  361,  291,  290,  290,  351,  737,  290,  291,
      291,  290,  290,  290,  290,  290,  290,  348,  290,  290,
      745,  290,  290,  291,  746,  345,  747,  290,  753,  749,
      290,  290,  290,  291,  290,  290,  344,  291,  750,  748,
      751,  754,  752,  291,  291,  291,  290,  344,  241,  290,
      291,  291,  290,  290,  290,  290,  290,  290,  290,  291,
      755,  290,  290,  291,  291,  290,  290,  757,  758,  290,

      756,  237,  761,  290,  759,  234,  290,  290,  291,  233,
      290,  229,  225,  760,  291,  291,  291,  220,  219,  638,
      291,  762,  638,  290,  291,  214,  290,  290,  291,  213,
      290,  290,  763,  203,  290,  291,  202,  768,  201,  291,
      768,  764,  637,  564,  563,  637,  198,  243,  197,  243,
      243,  291,  196,  186,  243,  291,  243,  243,  243,  291,
      243,  243,  183,  291,  996,  767,  639,  996,  180,  291,
      765,  179,  766,  824,  291,  823,  179,  178, 1053,  244,
      243,  825,  243,  243,  769,  243,  244,  243,  243,  243,
      244,  243,  243, 1053,  243,  826,  243,  243,  243,  827,

      243,  243, 1053,  243,  828,  243,  243, 1053,  829, 1053,
     1053,  997,  244,  830, 1053, 1053,  243,  244,  243,  243,
      290,  244,  243,  290,  243,  243,  244, 1053, 1053, 1053,
      244,  243,  831,  243,  243,  244, 1053,  243, 1053,  243,
      243,  832, 1053,  243,  833,  243,  243,  243,  244,  243,
      243, 1053,  291, 1053,  244,  243,  835,  243,  243,  243,
     1053,  243,  243,  244,  834,  243, 1053,  243,  243,  244,
     1053, 1053,  836, 1053,  837,  244, 1053, 1053,  243,  244,
      243,  243,  243, 1053,  243,  243,  243,  244,  243,  243,
     1053,  244,  840, 1053,  838, 1053,  841,  244,  243, 1053,

      243,  243,  243, 1053,  243,  243,  243,  839,  243,  243,
      244, 1053,  843,  243,  244,  243,  243, 1053,  244,  290,
      842,  243,  290,  243,  243,  243, 1053,  243,  243,  243,
      244,  243,  243,  243,  244,  243,  243,  243,  244,  243,
      243, 1053,  844, 1053,  845,  244,  736,  850,  243,  736,
     1053,  291,  243,  244,  243,  243,  290,  244, 1053,  290,
      290,  244, 1053,  290,  846,  244, 1053,  847, 1053,  244,
      848,  851,  290,  290, 1053,  290,  290, 1053,  244, 1053,
     1053, 1053,  853,  854,  244, 1053,  290,  852,  291,  290,
     1053,  290,  291,  737,  290,  290,  855,  290,  290,  849,

      290,  856, 1053,  290,  291,  291,  290,  857,  290,  290,
     1053,  290,  290,  858, 1053, 1053, 1053,  290,  291,  859,
      290,  290,  861,  291,  290,  290, 1053,  291,  290,  291,
      862,  290, 1053, 1053,  290,  291,  860, 1053, 1053,  290,
      291,  291,  290, 1053,  290, 1053,  863,  290,  864,  291,
     1053,  290,  290,  291,  290,  290,  290,  291, 1053,  290,
     1053,  867,  868,  291,  290, 1053,  290,  290,  865,  290,
     1053,  291,  290,  866,  870,  290,  291,  290,  869,  290,
      290, 1053,  290,  291,  291, 1053, 1053,  290,  291,  290,
      290, 1053,  290, 1053,  290, 1053,  291,  290,  291,  768,

      872,  871,  768,  290,  291,  243,  290,  243,  243,  291,
      243,  291,  243,  243, 1053,  911, 1053, 1053,  873,  291,
      912,  291,  243,  874,  243,  243,  291,  875, 1053, 1053,
      290,  291,  913,  290, 1053,  291,  243,  244,  243,  243,
      928,  243,  244,  243,  243,  243,  769,  243,  243,  243,
      876,  243,  243,  243,  244,  243,  243,  243, 1053,  243,
      243,  243,  291,  243,  243, 1053, 1053, 1053,  244,  243,
     1053,  243,  243,  244, 1053, 1053, 1053,  244, 1053,  914,
      243,  244,  243,  243,  243,  244,  243,  243,  243,  244,
      243,  243,  243,  244,  243,  243,  243,  915,  243,  243,

      290,  244,  919,  290, 1053,  917,  920,  918,  243, 1053,
      243,  243,  244,  916, 1053, 1053,  244, 1053,  921,  243,
      244,  243,  243,  243,  244,  243,  243,  243,  244,  243,
      243,  243,  291,  243,  243,  243, 1053,  243,  243, 1053,
      244,  243,  922,  243,  243,  923,  243, 1053,  243,  243,
      243,  244,  243,  243, 1053,  244,  924,  290, 1053,  244,
      290, 1053,  243,  244,  243,  243,  243,  244,  243,  243,
     1053,  290,  290,  244,  290,  290,  290,  290,  244,  290,
      290,  929,  244, 1053,  290,  926,  930,  290,  290,  291,
      925,  290,  290,  290,  244,  290,  290,  290,  244,  290,

      290, 1053,  290,  291,  291, 1053,  927,  931,  291,  291,
     1053,  290,  932, 1053,  290, 1053,  291, 1053,  934,  290,
      291, 1053,  290,  290,  291,  291,  290, 1053,  933,  291,
      935,  291,  290,  936,  290,  290,  290,  290,  290,  290,
     1053,  290,  937,  291,  938,  290,  290,  290,  290,  290,
      290,  291, 1053,  939,  290,  291,  940,  290,  290, 1053,
      290,  290,  941,  290,  291, 1053,  291, 1053,  291,  290,
      291,  243,  290,  243,  243, 1053, 1053,  291,  291,  291,
      243, 1053,  243,  243, 1053,  243,  291,  243,  243, 1053,
      291, 1053,  291,  943,  243, 1053,  243,  243,  942, 1053,

     1053,  291, 1053,  244,  944,  243, 1053,  243,  243, 1053,
     1053,  290,  244,  243,  290,  243,  243,  244,  243, 1053,
      243,  243,  243, 1053,  243,  243,  244, 1053, 1053, 1053,
      964,  243,  965,  243,  243, 1053,  243,  244,  243,  243,
      966, 1053, 1053,  291,  967,  244,  243, 1053,  243,  243,
      244, 1053, 1053,  290,  244,  243,  290,  243,  243,  243,
     1053,  243,  243,  244,  243,  968,  243,  243,  244,  243,
     1053,  243,  243,  971,  969,  243,  971,  970,  244,  243,
      290,  243,  243,  290, 1053,  291,  290,  244, 1053,  290,
      290,  244, 1053,  290,  290,  290,  244,  290,  290,  290,

      290,  244,  290,  290,  290,  244,  290,  290, 1053,  290,
     1053,  244,  291,  975,  973,  974,  290,  976,  291,  290,
      972,  977,  291, 1053, 1053,  290,  291,  291,  290, 1053,
      290,  291,  291,  290,  290,  978,  291,  290,  291, 1053,
      979,  981,  980,  290,  981, 1053,  290,  243,  291,  243,
      243, 1053,  243,  290,  243,  243,  290,  291,  243, 1053,
      243,  243,  291, 1008, 1053, 1053,  291,  290, 1000,  998,
      290, 1053, 1053,  291,  999,  291, 1053, 1053,  983,  244,
      243, 1053,  243,  243,  244,  291, 1053, 1053,  982,  243,
      244,  243,  243, 1053,  243, 1001,  243,  243,  243,  291,

      243,  243,  971, 1053,  243,  971,  243,  290,  243,  243,
      290, 1004,  244,  243, 1004,  290,  290, 1053,  290,  290,
      290,  244,  290,  290, 1053,  290,  244, 1053, 1053, 1006,
      244, 1009, 1002,  981,  244, 1053,  981, 1007,  244,  291,
     1053,  290, 1012,  244,  290, 1012, 1053,  291,  291,  972,
     1053, 1053,  291, 1003,  291, 1053, 1010, 1053, 1005,  243,
     1053,  243,  243, 1053,  243,  291,  243,  243,  243, 1023,
      243,  243, 1053,  291,  291,  243, 1053,  243,  243, 1024,
      982,  243, 1053,  243,  243, 1025, 1053, 1053, 1011, 1013,
      243,  244,  243,  243, 1053, 1004,  244,  243, 1004,  243,

      244,  243,  243,  290, 1053,  290,  290,  244,  290,  290,
     1053,  290,  290,  244,  290, 1028, 1026,  290, 1029, 1053,
      290, 1030,  244,  290, 1053, 1012,  290,  244, 1012,  290,
     1053,  244,  290, 1053, 1053,  291,  243,  291,  243,  243,
     1053,  291, 1005,  291, 1053, 1053, 1027, 1053,  243,  291,
      243,  243, 1031,  290, 1053,  291,  290,  291, 1037, 1053,
      243,  291,  243,  243,  243, 1053,  243,  243,  244, 1053,
     1053,  243, 1013,  243,  243, 1053, 1032, 1053,  290,  290,
      244,  290,  290,  290,  290,  291,  290,  290, 1039, 1053,
     1053,  243,  244,  243,  243,  243,  244,  243,  243,  290,

     1053,  290,  290,  244,  290, 1038,  243, 1053,  243,  243,
      291,  291, 1053, 1053,  290,  291,  291,  290,  243, 1053,
      243,  243,  290,  244, 1040,  290,  290,  244, 1051,  290,
     1053,  291, 1052,  291,  243, 1053,  243,  243,  244, 1043,
     1053, 1053, 1053, 1047, 1053, 1044,  291, 1053, 1053, 1053,
      244, 1048, 1053, 1053,  291, 1053, 1053, 1053,  291, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,  244,   52,   52,   52,
       52,   52,   52,   57,   57,   57,   57,   57,   57,   64,
       64,   64,   64,   64,   64,   69,   69,   69,   69,   69,
       69,  171,  171,  171,  171,  171,  171,  211,  211, 1053,

      211,  211,  211,  221,  221,  221,  221,  221,  221,  224,
     1053, 1053, 1053,  224,  224,  226,  226,  226,  226,  226,
      226,  232,  232, 1053, 1053,  232,  232,  238,  238,  238,
      238,  238,  238,  242,  242, 1053,  242,  242,  242,  278,
      278, 1053,  278,  278,  278,  289,  289, 1053, 1053, 1053,
      289,  326,  326, 1053,  326,  326,  326,  379,  379, 1053,
     1053, 1053,  379,   17, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053
    } ;

static yyconst flex_int16_t yy_chk[3515] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    7,    7,    2,    2,    3,    3,    3,    3, 1069,
        2,    4,    4,    4,    4,    4,    5,    5,    6,    6,
        8,    8,   19,    2,   28,   19,    4,   15,   15,   15,
       15,   28,   35,   30,   15,   32,   34,   33,   32,    2,
       30,    2,   32,    2,   39, 1049,    2,    2,   33,   35,

       34,   50,   67,   50,    4, 1046,   39,   67,    5,   15,
        6,   69,   69,    5, 1045,    6,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   46,   49,   10,
       10,   16,   16,   16,   16,  170,   10,  170,   16,  149,
       63,   46,   55,   55,   55,  154,  149,  151,   49,   10,
       60,   60,   60,   60,  151,  153,  154,  155,  153,  212,

      212,  177,  153,   16,  177,   10, 1042,   10,   63,   10,
     1041,  155,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  156, 1036,   12,   12,   72,
      107,   72,   72,  107,   12,  166,   73,   73,   73,   73,
      160,  189,  156,  163,  163,  163,  163,   12,  202,  166,
      367,  202,  160,  367,  209,  189,  209,  223,  223,  223,

     1034,   72,  107,   12,  235,   12, 1033,   12,   73,  235,
       12,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   14,  238,  238,   14,   14,   75,   75,   75,
       75, 1021,   14, 1019,   76,  111,   76,   76,  111,   77,
      115,   77,   77,  115,   78,   14,   78,   78,   77,   79,
     1017,   79,   79,   80, 1016,   80,   80, 1015,   79,   75,

      231,   14,  169,   14,  216,   14,   76,  111,   14,   14,
       43,   77,  115,   43,   43,   81,   78,   81,   81, 1014,
       43,   79,  169,  112,  216,   80,  112,   82,  231,   82,
       82,   81,  112,   83,  686,   83,   83,  997,   84,  118,
       84,   84,  118,  994,  354,   82,  782,   81,   83,   43,
      686,   43,   82,  376,  118,  112,   43,   43,  354,   82,
       84,   85,  782,   85,   85,   83,   86,   84,   86,   86,
       84,  118,   87,  376,   87,   87,   88,  401,   88,   88,
      993,   89,   86,   89,   89,   86,  991,   88,   87,   86,
       85,  401,   89,   85,   90,  806,   90,   90,   86,   87,

       91,   88,   91,   91,   87,  372,  372,  116,   88,   89,
      116,  806,   92,   89,   92,   92,   93,  135,   93,   93,
      135,   90,   91,  116,  990,   94,   90,   94,   94,  228,
      228,  228,   91,  512,   93,   95,   94,   95,   95,  116,
       97,   92,   97,   97,   92,  988,   93,  512,   93,  135,
       95,   96,   96,   96,   96,  987,  986,   94,   98,   98,
       98,   98,   99,  985,   99,   99,  100,   95,  100,  100,
      984,  101,   97,  101,  101,   97,  102,  881,  102,  102,
      962,  960,  101,   96,  103,  138,  103,  103,  138,  957,
       98,  956,  114,  881,   99,  114,  101,  104,  100,  104,

      104,  114,  105,  101,  105,  105,  955,  106,  102,  106,
      106,  108,  108,  108,  108,  120,  103,  138,  120,  954,
      104,  102,  953,  951,  114,  950,  103,  138,  949,  104,
      110,  110,  110,  110,  105,  105,  948,  105,  117,  106,
      104,  117,  119,  108,  120,  119,  947,  120,  123,  121,
      122,  123,  121,  122,  106,  946,  117,  125,  124,  123,
      125,  124,  110,  117,  119,  121,  122,  945,  121,  124,
      117,  119,  121,  123,  119,  126,  127,  122,  126,  127,
      123,  121,  122,  910,  125,  128,  124,  909,  128,  125,
      124,  129,  907,  132,  129,  130,  132,  126,  130,  906,

      904,  417,  129,  128,  417,  127,  137,  126,  127,  137,
      130,  131,  131,  131,  131,  128,  900,  128,  133,  133,
      133,  133,  899,  129,  898,  132,  897,  130,  132,  134,
      136,  134,  134,  136,  139,  892,  134,  139,  137,  140,
      891,  136,  140,  131,  141,  890,  889,  141,  417,  528,
      133,  137,  528,  888,  887,  136,  171,  139,  886,  171,
      885,  134,  136,  884,  883,  882,  139,  142,  142,  142,
      142,  140,  140,  880,  140,  879,  141,  139,  144,  144,
      144,  144,  165,  165,  165,  165,  878,  242,  171,  242,
      242,  141,  172,  172,  172,  172,  528,  877,  822,  142,

      174,  174,  174,  174,  176,  176,  176,  176,  820,  243,
      144,  243,  243,  819,  165,  237,  237,  237,  237,  242,
      244,  244,  244,  244,  172,  245,  245,  245,  245,  818,
      565,  817,  174,  565,  816,  814,  176,  247,  247,  247,
      247,  243,  248,  248,  248,  248,  250,  811,  250,  250,
      810,  251,  244,  251,  251,  250,  252,  245,  252,  252,
      809,  808,  253,  237,  253,  253,  807,  252,  255,  247,
      255,  255,  254,  251,  254,  254,  805,  565,  250,  255,
      797,  796,  795,  251,  253,  794,  793,  256,  252,  256,
      256,  792,  791,  257,  253,  257,  257,  790,  254,  258,

      255,  258,  258,  789,  254,  788,  256,  259,  257,  259,
      259,  787,  786,  260,  258,  260,  260,  785,  261,  256,
      261,  261,  784,  783,  260,  257,  262,  781,  262,  262,
      263,  258,  263,  263,  289,  780,  259,  289,  260,  259,
      261,  264,  779,  264,  264,  260,  265,  778,  265,  265,
      261,  262,  266,  777,  266,  266,  290,  263,  262,  290,
      776,  267,  263,  267,  267,  264,  289,  775,  268,  265,
      268,  268,  269,  264,  269,  269,  774,  773,  265,  268,
      267,  772,  266,  270,  266,  270,  270,  271,  290,  271,
      271,  269,  272,  267,  272,  272,  771,  770,  705,  271,

      268,  704,  702,  273,  269,  273,  273,  701,  276,  272,
      276,  276,  699,  270,  278,  270,  278,  278,  279,  271,
      279,  279,  273,  698,  272,  273,  274,  274,  274,  274,
      280,  280,  280,  280,  281,  273,  281,  281,  697,  282,
      276,  282,  282,  695,  276,  283,  278,  283,  283,  694,
      279,  693,  284,  692,  284,  284,  569,  691,  274,  569,
      281,  281,  280,  284,  690,  285,  281,  285,  285,  687,
      685,  282,  282,  286,  684,  286,  286,  283,  683,  287,
      283,  287,  287,  288,  284,  288,  288,  682,  285,  291,
      291,  291,  291,  292,  292,  292,  292,  285,  294,  294,

      294,  294,  681,  569,  297,  286,  298,  297,  285,  298,
      680,  287,  286,  297,  678,  288,  295,  295,  295,  295,
      677,  291,  676,  287,  299,  292,  300,  299,  298,  300,
      294,  301,  675,  674,  301,  299,  297,  673,  298,  302,
      303,  306,  302,  303,  306,  671,  304,  670,  300,  304,
      302,  305,  308,  669,  305,  308,  299,  301,  300,  303,
      668,  304,  309,  301,  307,  309,  305,  307,  667,  666,
      306,  302,  303,  306,  308,  307,  310,  311,  304,  310,
      311,  665,  312,  305,  308,  312,  664,  309,  313,  307,
      672,  313,  314,  672,  309,  314,  307,  316,  663,  315,

      316,  311,  315,  310,  317,  312,  662,  317,  310,  311,
      315,  314,  324,  661,  312,  324,  316,  660,  313,  659,
      313,  658,  319,  318,  314,  319,  318,  320,  657,  316,
      320,  315,  656,  655,  317,  318,  317,  672,  654,  319,
      321,  321,  321,  321,  324,  653,  320,  652,  324,  320,
      323,  323,  323,  323,  319,  318,  651,  650,  326,  320,
      326,  326,  649,  648,  327,  326,  327,  327,  647,  646,
      645,  327,  321,  328,  328,  328,  328,  644,  643,  330,
      328,  329,  330,  331,  329,  570,  331,  568,  332,  334,
      326,  332,  334,  567,  333,  335,  327,  333,  335,  332,

      336,  566,  562,  336,  561,  328,  379,  329,  329,  379,
      560,  330,  330,  329,  559,  331,  558,  333,  331,  557,
      332,  334,  337,  337,  337,  337,  333,  335,  334,  556,
      555,  554,  336,  339,  339,  339,  339,  333,  379,  335,
      340,  340,  340,  340,  341,  553,  341,  341,  368,  368,
      368,  368,  380,  552,  337,  380,  381,  381,  381,  381,
      382,  382,  382,  382,  551,  339,  384,  384,  384,  384,
      385,  385,  385,  385,  550,  386,  341,  386,  386,  387,
      387,  387,  387,  549,  380,  548,  547,  703,  381,  546,
      703,  545,  382,  389,  389,  389,  389,  544,  384,  416,

      416,  416,  416,  423,  423,  423,  423,  386,  543,  542,
      541,  387,  424,  424,  424,  424,  425,  425,  425,  425,
      427,  427,  427,  427,  428,  428,  428,  428,  430,  430,
      430,  430,  540,  431,  703,  431,  431,  432,  468,  432,
      432,  468,  539,  433,  431,  433,  433,  434,  538,  434,
      434,  423,  537,  536,  532,  435,  428,  435,  435,  531,
      424,  432,  468,  530,  425,  431,  529,  526,  433,  432,
      468,  436,  435,  436,  436,  433,  434,  525,  437,  434,
      437,  437,  524,  438,  523,  438,  438,  435,  522,  439,
      521,  439,  439,  436,  438,  440,  908,  440,  440,  908,

      520,  437,  519,  436,  439,  441,  518,  441,  441,  442,
      437,  442,  442,  517,  445,  438,  445,  445,  516,  515,
      442,  439,  443,  440,  443,  443,  514,  440,  444,  441,
      444,  444,  513,  511,  442,  443,  446,  441,  446,  446,
      510,  442,  445,  908,  509,  447,  445,  447,  447,  444,
      448,  446,  448,  448,  443,  508,  449,  447,  449,  449,
      444,  450,  507,  450,  450,  448,  506,  505,  446,  449,
      451,  952,  451,  451,  952,  504,  452,  447,  452,  452,
      503,  502,  448,  450,  501,  422,  451,  453,  449,  453,
      453,  421,  454,  450,  454,  454,  420,  455,  419,  455,

      455,  418,  451,  456,  452,  456,  456,  415,  452,  454,
      455,  457,  457,  457,  457,  453,  414,  413,  952,  453,
      458,  458,  458,  458,  454,  459,  412,  459,  459,  455,
      460,  411,  460,  460,  410,  456,  456,  409,  461,  408,
      461,  461,  462,  457,  462,  462,  463,  407,  463,  463,
      406,  405,  458,  464,  464,  464,  464,  459,  466,  466,
      466,  466,  460,  469,  461,  467,  469,  404,  467,  460,
      461,  403,  459,  402,  462,  400,  467,  399,  463,  470,
      462,  471,  470,  398,  471,  464,  463,  472,  469,  473,
      472,  474,  473,  397,  474,  469,  476,  467,  471,  476,

      475,  477,  474,  475,  477,  396,  395,  479,  470,  472,
      479,  470,  473,  471,  480,  475,  394,  480,  393,  472,
      479,  473,  392,  474,  476,  477,  478,  481,  476,  478,
      481,  483,  475,  477,  483,  480,  391,  478,  482,  479,
      390,  482,  484,  483,  378,  484,  480,  485,  377,  486,
      485,  478,  486,  482,  375,  481,  374,  484,  478,  481,
      485,  487,  488,  483,  487,  488,  373,  370,  366,  489,
      482,  486,  489,  491,  484,  490,  491,  487,  490,  485,
      492,  486,  496,  492,  365,  496,  491,  364,  961,  363,
      488,  961,  490,  487,  488,  497,  362,  489,  497,  498,

      499,  489,  498,  499,  361,  491,  360,  490,  493,  493,
      493,  493,  492,  492,  496,  493,  494,  494,  494,  494,
      495,  495,  495,  495,  359,  498,  358,  497,  357,  496,
      500,  498,  499,  500,  497,  961,  611,  356,  499,  611,
      493,  527,  527,  527,  527,  533,  533,  533,  533,  611,
      355,  353,  495,  535,  535,  535,  535,  563,  563,  563,
      563,  352,  500,  571,  571,  571,  571,  351,  611,  350,
      500,  573,  573,  573,  573,  349,  348,  533,  574,  574,
      574,  574,  576,  576,  576,  576,  577,  347,  577,  577,
      346,  578,  345,  578,  578,  579,  344,  579,  579,  580,

      240,  580,  580,  577,  578,  581,  236,  581,  581,  233,
      232,  571,  230,  582,  229,  582,  582,  580,  577,  583,
      227,  583,  583,  578,  222,  579,  574,  579,  582,  583,
      218,  580,  584,  581,  584,  584,  585,  581,  585,  585,
      217,  586,  215,  586,  586,  582,  587,  214,  587,  587,
      588,  583,  588,  588,  589,  963,  589,  589,  963,  585,
      213,  584,  586,  590,  584,  590,  590,  588,  585,  595,
      210,  595,  595,  586,  587,  208,  207,  989,  587,  589,
      989,  203,  588,  201,  590,  591,  589,  591,  591,  592,
      200,  592,  592,  595,  593,  590,  593,  593,  199,  592,

      591,  595,  963,  594,  593,  594,  594,  596,  198,  596,
      596,  197,  597,  196,  597,  597,  598,  591,  598,  598,
      195,  592,  596,  194,  989,  193,  593,  597,  192,  191,
      190,  594,  598,  188,  599,  594,  599,  599,  187,  596,
      600,  186,  600,  600,  597,  185,  184,  183,  598,  601,
      600,  601,  601,  602,  182,  602,  602,  603,  181,  603,
      603,  180,  605,  599,  605,  605,  599,  601,  604,  604,
      604,  604,  600,  606,  610,  606,  606,  610,  602,  179,
      607,  601,  607,  607,  608,  602,  608,  608,  168,  603,
      609,  610,  609,  609,  605,  613,  612,  167,  613,  612,

      604,  614,  603,  164,  614,  606,  610,  616,  615,  605,
      616,  615,  607,  613,  162,  161,  608,  616,  608,  159,
      606,  617,  609,  615,  617,  607,  612,  613,  612,  614,
      158,  618,  157,  614,  618,  619,  152,  609,  619,  616,
      615,  620,  621,  622,  620,  621,  622,  150,  625,  623,
      617,  625,  623,  617,  618,  148,  619,  624,  625,  621,
      624,  626,  627,  618,  626,  627,  146,  619,  622,  620,
      623,  626,  624,  620,  621,  622,  628,  145,   71,  628,
      625,  623,  629,  630,  632,  629,  630,  632,  631,  624,
      627,  631,  633,  626,  627,  633,  636,  629,  630,  636,

      628,   68,  633,  634,  631,   66,  634,  635,  628,   64,
      635,   62,   59,  632,  629,  630,  632,   54,   51,  638,
      631,  634,  638,  639,  633,   48,  639,  640,  636,   47,
      640,  641,  635,   42,  641,  634,   41,  642,   40,  635,
      642,  636,  637,  637,  637,  637,   38,  706,   37,  706,
      706,  638,   36,   31,  708,  639,  708,  708,  707,  640,
      707,  707,   29,  641,  996,  641,  638,  996,   27,  642,
      639,   25,  640,  707,  637,  706,   23,   21,   17,  706,
      712,  708,  712,  712,  642,  709,  708,  709,  709,  710,
      707,  710,  710,    0,  711,  709,  711,  711,  713,  710,

      713,  713,    0,  714,  711,  714,  714,    0,  713,    0,
        0,  996,  712,  714,    0,    0,  717,  709,  717,  717,
      744,  710,  715,  744,  715,  715,  711,    0,    0,    0,
      713,  716,  715,  716,  716,  714,    0,  718,    0,  718,
      718,  716,    0,  719,  717,  719,  719,  720,  717,  720,
      720,    0,  744,    0,  715,  721,  719,  721,  721,  722,
        0,  722,  722,  716,  718,  723,    0,  723,  723,  718,
        0,    0,  719,    0,  720,  719,    0,    0,  724,  720,
      724,  724,  725,    0,  725,  725,  726,  721,  726,  726,
        0,  722,  725,    0,  723,    0,  726,  723,  727,    0,

      727,  727,  728,    0,  728,  728,  729,  724,  729,  729,
      724,    0,  728,  730,  725,  730,  730,    0,  726,  738,
      727,  731,  738,  731,  731,  732,    0,  732,  732,  733,
      727,  733,  733,  734,  728,  734,  734,  735,  729,  735,
      735,    0,  730,    0,  731,  730,  736,  738,  736,  736,
        0,  738,  737,  731,  737,  737,  739,  732,    0,  739,
      740,  733,    0,  740,  732,  734,    0,  734,    0,  735,
      735,  739,  741,  742,    0,  741,  742,    0,  736,    0,
        0,    0,  741,  742,  737,    0,  743,  740,  739,  743,
        0,  745,  740,  736,  745,  750,  743,  746,  750,  737,

      746,  745,    0,  747,  741,  742,  747,  746,  749,  748,
        0,  749,  748,  747,    0,    0,    0,  751,  743,  748,
      751,  752,  750,  745,  752,  753,    0,  750,  753,  746,
      751,  754,    0,    0,  754,  747,  749,    0,    0,  755,
      749,  748,  755,    0,  756,    0,  751,  756,  752,  751,
        0,  757,  758,  752,  757,  758,  759,  753,    0,  759,
        0,  757,  758,  754,  760,    0,  761,  760,  755,  761,
        0,  755,  762,  756,  760,  762,  756,  763,  759,  764,
      763,    0,  764,  757,  758,    0,    0,  765,  759,  766,
      765,    0,  766,    0,  767,    0,  760,  767,  761,  768,

      763,  762,  768,  769,  762,  823,  769,  823,  823,  763,
      824,  764,  824,  824,    0,  823,    0,    0,  764,  765,
      824,  766,  825,  766,  825,  825,  767,  767,    0,    0,
      850,  768,  825,  850,    0,  769,  826,  823,  826,  826,
      850,  827,  824,  827,  827,  828,  768,  828,  828,  829,
      769,  829,  829,  830,  825,  830,  830,  831,    0,  831,
      831,  832,  850,  832,  832,    0,    0,    0,  826,  833,
        0,  833,  833,  827,    0,    0,    0,  828,    0,  833,
      835,  829,  835,  835,  834,  830,  834,  834,  836,  831,
      836,  836,  837,  832,  837,  837,  838,  834,  838,  838,

      853,  833,  837,  853,    0,  835,  838,  836,  839,    0,
      839,  839,  835,  834,    0,    0,  834,    0,  839,  840,
      836,  840,  840,  841,  837,  841,  841,  842,  838,  842,
      842,  843,  853,  843,  843,  844,    0,  844,  844,    0,
      839,  845,  842,  845,  845,  844,  846,    0,  846,  846,
      847,  840,  847,  847,    0,  841,  845,  854,    0,  842,
      854,    0,  848,  843,  848,  848,  849,  844,  849,  849,
        0,  851,  855,  845,  851,  855,  852,  856,  846,  852,
      856,  851,  847,    0,  857,  847,  852,  857,  858,  854,
      846,  858,  859,  862,  848,  859,  862,  860,  849,  861,

      860,    0,  861,  851,  855,    0,  848,  860,  852,  856,
        0,  863,  861,    0,  863,    0,  857,    0,  862,  867,
      858,    0,  867,  864,  859,  862,  864,    0,  861,  860,
      863,  861,  865,  864,  866,  865,  868,  866,  869,  868,
        0,  869,  865,  863,  866,  870,  871,  872,  870,  871,
      872,  867,    0,  869,  873,  864,  871,  873,  874,    0,
      875,  874,  872,  875,  865,    0,  866,    0,  868,  876,
      869,  911,  876,  911,  911,    0,    0,  870,  871,  872,
      912,    0,  912,  912,    0,  913,  873,  913,  913,    0,
      874,    0,  875,  874,  914,    0,  914,  914,  873,    0,

        0,  876,    0,  911,  875,  915,    0,  915,  915,    0,
        0,  928,  912,  916,  928,  916,  916,  913,  917,    0,
      917,  917,  918,    0,  918,  918,  914,    0,    0,    0,
      915,  919,  916,  919,  919,    0,  920,  915,  920,  920,
      917,    0,    0,  928,  918,  916,  921,    0,  921,  921,
      917,    0,    0,  929,  918,  922,  929,  922,  922,  923,
        0,  923,  923,  919,  924,  922,  924,  924,  920,  925,
        0,  925,  925,  926,  924,  926,  926,  925,  921,  927,
      930,  927,  927,  930,    0,  929,  931,  922,    0,  931,
      932,  923,    0,  932,  933,  934,  924,  933,  934,  935,

      936,  925,  935,  936,  937,  926,  938,  937,    0,  938,
        0,  927,  930,  933,  927,  932,  940,  934,  931,  940,
      926,  935,  932,    0,    0,  939,  933,  934,  939,    0,
      941,  935,  936,  941,  942,  939,  937,  942,  938,    0,
      941,  943,  942,  944,  943,    0,  944,  964,  940,  964,
      964,    0,  965,  976,  965,  965,  976,  939,  966,    0,
      966,  966,  941,  976,    0,    0,  942,  978,  966,  964,
      978,    0,    0,  943,  965,  944,    0,    0,  944,  964,
      967,    0,  967,  967,  965,  976,    0,    0,  943,  968,
      966,  968,  968,    0,  969,  967,  969,  969,  970,  978,

      970,  970,  971,    0,  971,  971,  972,  974,  972,  972,
      974,  973,  967,  973,  973,  975,  977,    0,  975,  977,
      979,  968,  980,  979,    0,  980,  969,    0,    0,  974,
      970,  977,  970,  981,  971,    0,  981,  975,  972,  974,
        0,  982,  983,  973,  982,  983,    0,  975,  977,  971,
        0,    0,  979,  972,  980,    0,  980,    0,  973,  998,
        0,  998,  998,    0,  999,  981,  999,  999, 1000,  998,
     1000, 1000,    0,  982,  983, 1001,    0, 1001, 1001,  999,
      981, 1002,    0, 1002, 1002, 1001,    0,    0,  982,  983,
     1003,  998, 1003, 1003,    0, 1004,  999, 1004, 1004, 1005,

     1000, 1005, 1005, 1007,    0, 1006, 1007, 1001, 1006, 1008,
        0, 1009, 1008, 1002, 1009, 1006, 1002, 1010, 1007,    0,
     1010, 1009, 1003, 1011,    0, 1012, 1011, 1004, 1012, 1013,
        0, 1005, 1013,    0,    0, 1007, 1023, 1006, 1023, 1023,
        0, 1008, 1004, 1009,    0,    0, 1005,    0, 1024, 1010,
     1024, 1024, 1010, 1028,    0, 1011, 1028, 1012, 1024,    0,
     1025, 1013, 1025, 1025, 1026,    0, 1026, 1026, 1023,    0,
        0, 1027, 1012, 1027, 1027,    0, 1013,    0, 1029, 1030,
     1024, 1029, 1030, 1031, 1032, 1028, 1031, 1032, 1029,    0,
        0, 1037, 1025, 1037, 1037, 1038, 1026, 1038, 1038, 1039,

        0, 1040, 1039, 1027, 1040, 1026, 1043,    0, 1043, 1043,
     1029, 1030,    0,    0, 1044, 1031, 1032, 1044, 1047,    0,
     1047, 1047, 1048, 1037, 1031, 1048, 1052, 1038, 1047, 1052,
        0, 1039, 1048, 1040, 1051,    0, 1051, 1051, 1043, 1038,
        0,    0,    0, 1043,    0, 1040, 1044,    0,    0,    0,
     1047, 1044,    0,    0, 1048,    0,    0,    0, 1052,    0,
        0,    0,    0,    0,    0,    0, 1051, 1054, 1054, 1054,
     1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055, 1055, 1056,
     1056, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1057,
     1057, 1058, 1058, 1058, 1058, 1058, 1058, 1059, 1059,    0,

     1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1061,
        0,    0,    0, 1061, 1061, 1062, 1062, 1062, 1062, 1062,
     1062, 1063, 1063,    0,    0, 1063, 1063, 1064, 1064, 1064,
     1064, 1064, 1064, 1065, 1065,    0, 1065, 1065, 1065, 1066,
     1066,    0, 1066, 1066, 1066, 1067, 1067,    0,    0,    0,
     1067, 1068, 1068,    0, 1068, 1068, 1068, 1070, 1070,    0,
        0,    0, 1070, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[80] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1722 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 1888 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1054 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1053 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
return COLON;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
return PERC;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
;
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 277 "levcomp.lpp"
;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 279 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 281 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2437 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1054 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1054 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1053);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 281 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

